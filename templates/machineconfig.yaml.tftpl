version: v1alpha1
machine:
  nodeLabels:
    topology.kubernetes.io/region: ${proxmox_region}
    topology.kubernetes.io/zone: ${proxmox_zone}
  install:
    wipe: true
    disk: /dev/sda
    image: ${installer_image}
  %{~ if kernel_modules != null ~}
  kernel:
    modules:
      %{~ for module in kernel_modules ~}
      - name: ${module}
      %{~ endfor ~}
  %{endif}
  kubelet:
    image: "ghcr.io/siderolabs/kubelet:v${kubernetes_version}"
    extraArgs:
      cloud-provider: external
      rotate-server-certificates: true
    clusterDNS:
      - "${cidrhost(service_subnet, 10)}"
    nodeIP:
      validSubnets: ["${vm_subnet}"]
  network:
    hostname: ${hostname}
    interfaces:
      - interface: "eth0"
        dhcp: true
        %{~ if remote_clusters != null ~}
        routes:
          %{~ for name, config in remote_clusters ~}
          - network: ${config.k8s_cidr}
            gateway: ${config.gateway_ip}
          %{~ endfor ~}
        %{endif}
        %{~ if type == "controlplane" ~}
        vip:
          ip: "${kube_vip}"
        %{ endif }
  systemDiskEncryption:
    state:
      provider: luks2
      options: ["no_read_workqueue", "no_write_workqueue"]
      keys:
        - nodeID: {}
          slot: 0
    ephemeral:
      provider: luks2
      options: ["no_read_workqueue", "no_write_workqueue"]
      keys:
        - nodeID: {}
          slot: 0
  %{~ if sysctls != null ~}
  sysctls:
    %{~ for key, value in sysctls ~}
    ${key}: ${value}
    %{~ endfor ~}
  %{endif}
  %{~ if type == "controlplane" ~}
  features:
    kubernetesTalosAPIAccess:
      enabled: true
      allowedRoles:
        - "os:reader"
        - "os:admin"
        - "os:etcd:backup"
      allowedKubernetesNamespaces:
        - "kube-system"
        - "operator-talos"
  %{ endif }
cluster:
  allowSchedulingOnControlPlanes: true # TODO: Remove after finding out correct taints for cilium
  network:
    cni:
      name: none
    podSubnets: [${pod_subnet}]
    serviceSubnets: [${service_subnet}]
  %{~ if mcsapi_enabled == true ~}
  coreDNS:
    disabled: true
  %{ endif }
  proxy:
    disabled: true
  apiServer:
    image: "registry.k8s.io/kube-apiserver:v${kubernetes_version}"
  controllerManager:
    image: "registry.k8s.io/kube-controller-manager:v${kubernetes_version}"
  scheduler:
    image: "registry.k8s.io/kube-scheduler:v${kubernetes_version}"
  %{~ if type == "controlplane" ~}
  etcd:
    advertisedSubnets: ["${vm_subnet}"]
    listenSubnets: ["${vm_subnet}"]
  %{ endif }
  externalCloudProvider:
    enabled: true
  extraManifests:
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagerconfigs.yaml"
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagers.yaml"
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml"
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_probes.yaml"
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_prometheusagents.yaml"
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_prometheuses.yaml"
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml"
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_scrapeconfigs.yaml"
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml"
    - "https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/refs/tags/v${prometheus_operator_crds_version}/example/prometheus-operator-crd/monitoring.coreos.com_thanosrulers.yaml"
    - "https://github.com/kubernetes-sigs/gateway-api/releases/download/v${gateway_api_crds_version}/experimental-install.yaml"
  inlineManifests:
    ${indent(4, yamlencode(inline_manifests))}
